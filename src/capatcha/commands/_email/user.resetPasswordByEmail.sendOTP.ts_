import { Body, Controller, Get, HttpException, HttpService, Inject, Post, Query } from '@nestjs/common';
import { ApiTags, ApiBearerAuth, ApiProperty } from '@nestjs/swagger';
import { InjectEntityManager } from '@nestjs/typeorm';
import { transformAndValidate } from 'class-transformer-validator';
import { IsDefined, IsEmail } from 'class-validator';
import { giveMeClassLogger } from 'src/common/winston.logger';
import { CommandError } from 'src/cqm/lib/command-error';
import { CommandResponse } from 'src/cqm/lib/command-response';
import { EntityManager } from 'typeorm';
import { OTP } from '../entities/otp.entity';
import { User } from '../entities/user.entity';
var randomNumber = require('random-number');

const topic = "user.resetPassword.sendOTP"
const logger = giveMeClassLogger(topic);

export class UserResetPasswordSendOtpCommandDTO {
    @ApiProperty()
    @IsDefined()
    @IsEmail()
    email: string;
}

@ApiTags('umm')
@ApiBearerAuth()
@Controller('api/umm/commands')
export class UserResetPasswordSendOtpCommand {
    constructor(
        @InjectEntityManager() private readonly manager: EntityManager
    ) { }

    async execute(dto: UserResetPasswordSendOtpCommandDTO): Promise<any> {
        logger.debug(`command execution started`)
        logger.silly(`command dto`, dto)
        dto = await transformAndValidate(UserResetPasswordSendOtpCommandDTO, dto)
        // check email
        const foundUser = await this.manager.findOne(User, { where: { email: dto.email } });
        if (!foundUser) {
            throw new CommandError('User not found', 'NOT_FOUND')
        }
        // create otp
        const otp = await this.manager.save(OTP, {
            actionType: 'RESET_PASSWORD_BY_EMAIL',
            email: dto.email,
            token: randomNumber({ min: 100000, max: 999999, integer: true }),
            isConsumed: false,
            consumedAt: null,
            payload: {},
        });
        // send email
        // send response
        return CommandResponse.success('Reset password sent successfully', 'OK')

    }

    @Post(topic)
    async httpHandler(@Body() body: UserResetPasswordSendOtpCommandDTO): Promise<any> {
        return this.execute(body)
    }
}