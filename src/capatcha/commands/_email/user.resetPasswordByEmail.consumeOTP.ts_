import { Body, Controller, Get, HttpException, HttpService, Inject, Post, Query } from '@nestjs/common';
import { ApiTags, ApiBearerAuth, ApiProperty } from '@nestjs/swagger';
import { InjectEntityManager } from '@nestjs/typeorm';
import { transformAndValidate } from 'class-transformer-validator';
import { IsDefined } from 'class-validator';
import { giveMeClassLogger } from 'src/common/winston.logger';
import { CommandError } from '@h-platform/cqm';
import { EntityManager } from 'typeorm';
import { OTP } from '../entities/otp.entity';
import { User } from '../entities/user.entity';
import * as bcrypt from 'bcrypt';
import { CommandResponse } from '@h-platform/cqm';

const topic = "user.resetPassword.consumeOTP"
const logger = giveMeClassLogger(topic);

export class UserResetPasswordConsumeOtpCommandDTO {
    @ApiProperty()
    @IsDefined()
    email: string;

    @ApiProperty()
    @IsDefined()
    token: string;

    @ApiProperty()
    @IsDefined()
    password: string;

    @ApiProperty()
    @IsDefined()
    password2: string;
}

@ApiTags('umm')
@ApiBearerAuth()
@Controller('api/umm/commands')
export class UserResetPasswordConsumeOtpCommand {
    constructor(
        @InjectEntityManager() private readonly manager: EntityManager
    ) { }

    async execute(dto: UserResetPasswordConsumeOtpCommandDTO): Promise<any> {
        logger.debug(`command execution started`)
        logger.silly(`command dto`, dto)
        dto = await transformAndValidate(UserResetPasswordConsumeOtpCommandDTO, dto)
        const otp = await this.manager.findOne(OTP, { where: { actionType: 'RESET_PASSWORD_BY_EMAIL', email: dto.email, otpToken: dto.token }, order: { createdAt: 'DESC' } });
        if (!otp) {
            throw new CommandError('OTP not found', 'NOT_FOUND')
        }
        if (otp.isConsumed) {
            throw new CommandError('OTP consumed', 'CONSUMED')
        }
        return this.manager.transaction(async (tm) => {
            const user = await tm.findOneOrFail(User, { where: { email: dto.email } });
            const hashedPassword = await bcrypt.hash(dto.password, 10);
            user.password = hashedPassword;
            await tm.save(user);
            otp.isConsumed = true;
            otp.consumedAt = new Date();
            await tm.save(otp);
            return CommandResponse.success('Password has been reset successfully', 'OK')
        })
    }

    @Post(topic)
    async httpHandler(@Body() body: UserResetPasswordConsumeOtpCommandDTO): Promise<any> {
        return this.execute(body)
    }
}